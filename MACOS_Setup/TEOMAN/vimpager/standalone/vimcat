#!/bin/sh
: if 0
version_tag=2.06


# try to find a better shell, especially on Solaris

PATH="$PATH:/usr/local/bin:/opt/csw/bin:/opt/local/bin:/usr/xpg6/bin:/usr/xpg4/bin:/usr/dt/bin:/usr/bin:/bin"

# debian lintian bitches if /usr/bin/ash is used instead of /bin/ash
if [ -f /etc/debian_version ]; then
    PATH=$(echo "$PATH" | sed 's,/usr/bin,/bin:/usr/bin,')
fi

export PATH

if [ -z "$POSIX_SHELL" ]; then
	if command -v ash >/dev/null; then
		POSIX_SHELL=ash
	elif command -v dash >/dev/null; then
		POSIX_SHELL=dash
	elif command -v ksh >/dev/null; then
		POSIX_SHELL=ksh
	elif [ -x /usr/xpg4/bin/sh ]; then
		POSIX_SHELL=/usr/xpg4/bin/sh
	elif command -v dtksh >/dev/null; then
		POSIX_SHELL=dtksh
	elif command -v ksh93 >/dev/null; then
		POSIX_SHELL=ksh93
	elif command -v bash >/dev/null; then
		POSIX_SHELL=bash
	elif command -v zsh >/dev/null; then
		POSIX_SHELL=zsh
	fi

	if [ ! -z "$POSIX_SHELL" ]; then
		export POSIX_SHELL
		exec "$POSIX_SHELL" "$0" "$@"
	else
		POSIX_SHELL=/bin/sh # hope for the best
		export POSIX_SHELL
	fi
fi

# hopefully we're now POSIX.

[ -n "$ZSH_VERSION" ] && emulate -R sh 2>/dev/null # force zsh into full POSIX

version="2.06-381-g2d3af2b (standalone, shell=$(command -v $POSIX_SHELL))"

if [ -n "$VIMPAGER_VIM" ]; then
    vim=$VIMPAGER_VIM
elif command -v vim.basic >/dev/null; then
    vim=vim.basic
elif command -v vim >/dev/null; then
    vim=vim
elif command -v nvim >/dev/null; then
    vim=nvim
else
    echo "$0: neither vim nor nvim found, vim or nvim is required for vimcat" >&2
    exit 1
fi

tab_stop=8

# Do not interact with X server in any way (fixes bug #255 with clobbering
# selection buffer and clipboard.)
unset DISPLAY

quit() {
    (
        kill "$vim_pid" >/dev/null 2>&1
        do_sleep 100
        kill -9 "$vim_pid" >/dev/null 2>&1

        kill "$pipeline_pid" >/dev/null 2>&1
        do_sleep 100
        kill -9 "$pipeline_pid" >/dev/null 2>&1

        kill "$tail_pid" >/dev/null 2>&1
        do_sleep 100
        if [ -f "${tmp_dir}/cat_pid" ]; then
            cat_pid=$(cat "${tmp_dir}/cat_pid")
            kill "$cat_pid" >/dev/null 2>&1
            do_sleep 100
            kill -9 "$cat_pid" >/dev/null 2>&1
        fi
        kill -9 "$tail_pid" >/dev/null 2>&1

        cd "${tmp_dir%/*}" 2>/dev/null # some systems cannot remove CWD

        rm -rf "$tmp_dir" 2>/dev/null # rm -rf "" shows error on OpenBSD
    ) &

    # Terminal settings may get screwed up.
    if [ -n "$OLDSTTY" ]; then
        stty "$OLDSTTY" 2>/dev/null >/dev/tty
    fi

    [ $tab_stop -ne 8 ] && tabs -8 2>/dev/null >/dev/tty

    exit "$@"
}

do_sleep() {
    _ms=${1:-100}
    "$vim" -NEnR -i NONE -u NONE +"sleep $_ms m" +q >/dev/null 2>&1
}

usage() {
    cat <<'EOF'
Usage: [32mvimcat [1;34m[[1;35mOPTION[1;34m][0m... [1;34m[[1;35mFILE [1m| [1;35m-[1;34m][0m...
Display [1;35mFILE[0m(s) in the terminal with (n)vim syntax highlighting using ANSI escape codes.

With no [1;35mFILE[0m, or when [1;35mFILE[0m is [1;35m-[0m, read standard input.

  [1m-h, --help, --usage[0m                This help screen.
  [1m-v, --version[0m                      Show version information and exit.
  [1m-n[0m                                 Print with line numbers.
  [1m-s[0m                                 Squeeze multiple blank lines into one.
  [1m-o [1;35mFILE[0m | [1;35m-[0m                        Output ANSI highlighted text to [1;35mFILE[0m or standard output.
  [1m-t [1;35mseconds[0m                         Scroll time in seconds (e.g: 1, 5, 0.4)
  [1m--cmd [1;35mCOMMAND[0m                      Run (n)vim [1;35mCOMMAND[0m before initialization.
  [1m-c [1;35mCOMMAND[0m                         Run (n)vim [1;35mCOMMAND[0m after initialization.
  [1m-u [1;35mFILE[0m                            Use [1;35mFILE[0m as the vimrc.
  [1m-x [0m                                Give debugging output on stderr.

Examples:
  [32mvimcat [1;35mprogram.py[0m                  # output [1;35mprogram.py[0m with highlighting to terminal

Project homepage: <[1;34mhttp://github.com/rkitover/vimpager[0m>
and documentation: <[1;34mhttps://github.com/rkitover/vimpager/blob/master/markdown/vimcat.md[0m>
or available locally via: [32mman [1;35mvimcat[0m
EOF
}

write_chunks() {
    cd "$chunks_dir"
    rm -f -- *
    split -b 4096 -
    touch PIPELINE_DONE
}

start_pipeline() {
    if [ -n "$pipeline" ]; then
        pipeline="$pipeline | write_chunks"
    else
        pipeline=write_chunks
    fi
    cat -- "$pipeline_start" | (eval "$pipeline" <&3 & echo $! > "$tmp_dir/pipeline_pid") 3<&0
    pipeline_pid=$(cat "$tmp_dir/pipeline_pid")
}

start_highlight_job() {
    if [ "${VIMCAT_DEBUG:-0}" -eq 0 ]; then silent="silent! "; else silent=; fi
    set -- -NEn -i NONE \
        --cmd "set runtimepath^=$runtime" \
--cmd "$silent source $0" \
        --cmd "call Init({ 'rc': '$vimcatrc' })" \
        --cmd visual \
        ${extra_cmd:+--cmd "$extra_cmd"} \
        ${extra_c:+-c "$extra_c"} \
        -c "call Run(\"$dest_file\", ${line_numbers:-0}, \"$chunks_dir\", \"$pipeline_start\")"

    [ -n "$vimcatrc" ] && set -- "$@" -u "$vimcatrc"

    if [ "${VIMCAT_DEBUG:-0}" -eq 0 ]; then
        ("$vim" "$@" </dev/tty >/dev/null 2>&1; touch "$tmp_dir/vim_done") &
        vim_pid=$!
    else
        "$vim" "$@" </dev/tty
        touch "$tmp_dir/vim_done"
    fi
}

squeeze_blank_lines() {
    sed '/^[ 	]*$/{
        N
        /^[ 	]*\n[ 	]*$/D
    }'
}

read_vim_settings() {
    i=1
    OLDIFS=$IFS
    IFS='
'
    for var in $(IFS=$OLDIFS; "$vim" -NEnR ${vimcatrc:+-u "$vimcatrc"} ${extra_cmd:+--cmd "$extra_cmd"} ${extra_c:+-c "$extra_c"} -i NONE +'
        let g:tab_stop = 8
        if ! &et
            let g:tab_stop = &ts
        endif
        call writefile([""] + map([g:tab_stop], "\"VAL:\".v:val"), "/dev/stderr")
        quit
    ' </dev/tty 2>&1 >/dev/null); do
        case "$var" in
            VAL:*)
                case $i in
                    1)
                        tab_stop=${var#VAL:}
                        break
                        ;;
                esac
                i=$((i + 1))
                ;;
        esac
    done
    IFS=$OLDIFS
}

# if no args and stdin is on a terminal, pretend we're cat and wait on stdin.
if [ $# -eq 0 -a -t 0 ]; then
    exec cat
fi

# check for -h before main option parsing, this is much faster
for arg in "$@"; do
    case "$arg" in
        "-h"|"--help"|"-help"|"--usage"|"-usage")
            usage
            quit 0
            ;;
        "-v"|"--version"|"-version")
            echo "vimcat $version"
            quit 0
            ;;
        "-x")
            set -x
            ;;
    esac
done

tmp_dir=${TMPDIR:-/tmp}
mkdir_options="-m 700"

case "$(uname -s)" in
    MINGW*|MSYS*)
        if [ -n "$temp" ]; then
            # MSYS2 is a little tricky, we're gonna stick to the user's private temp
            # the -m mode switch to mkdir doesn't work
            tmp_dir=$(cygpath --unix "$temp")
            mkdir_options=
        fi
        ;;
esac

tmp_dir=$tmp_dir/vimcat_$$

if ! mkdir $mkdir_options "$tmp_dir"; then
    echo "Could not create temporary directory $tmp_dir" >&2
    exit 1
fi

trap 'quit 1' PIPE HUP INT QUIT ILL TRAP KILL BUS TERM
tmp_file_in=$tmp_dir/vimcat_in.txt
out_fifo=$tmp_dir/vimcat_out.fifo

mkfifo "$out_fifo"

# check for arguments
while [ $# -gt 0 ] ; do
    case "$1" in
        "-c")
            shift
            if [ -z "$extra_c" ]; then
                extra_c=$1
            else
                extra_c="$extra_c | $1"
            fi
            shift
            ;;
        "--cmd")
            shift
            if [ -z "$extra_cmd" ]; then
                extra_cmd=$1
            else
                extra_cmd="$extra_cmd | $1"
            fi
            shift
            ;;
        "-u")
            shift
            vimcatrc=$1
            shift
            ;;
        "-o")
            shift
            output_file=$1
            shift
            ;;
        "-t")
            shift
            scroll_time=$1
            shift
            ;;
        "-s")
            shift
            squeeze_blank_lines=1
            ;;
        "-n")
            shift
            line_numbers=1
            ;;
        "-x")
            # xtrace should already be set by the first option parsing
            shift
            ;;
        "--")
            shift
            break
            ;;
        -)
            break
            ;;
        -*)
            echo "$0: bad option '$1', see --help for usage." >&2
            quit 1
            ;;
        *)
            break
            ;;
    esac
done

# Check for directories in args.
for arg; do
    [ -d "$arg" ] && echo "$0: '$arg' is a directory" && quit 1
done

# Just pass through if not on a tty, unless -o was given
if [ -z "$output_file" ]; then
    if [ ! -t 1 ]; then
        exec cat "$@"
    fi
fi

if [ -z "$vimcatrc" ]; then
    if [ -f ~/.vimcatrc ]; then
        vimcatrc=~/.vimcatrc
    else
        vimcatrc=
    fi
fi

if [ $# -eq 0 ]; then
    set -- -
fi

if [ -n "$output_file" -a $# -gt 1 ]; then
    echo "$0: -o can only be used with one input file or stdin." >&2
    quit 1
fi

# Save terminal settings to restore on quit.
OLDSTTY=$(stty -g 2>/dev/null </dev/tty)

read_vim_settings

chunks_dir=$tmp_dir/chunks
mkdir "$chunks_dir"

i=1
for file in "$@"
do
    if [ $# -ge 2 ]; then
        if [ $i -gt 1 ]; then
            printf '\n'
        fi
        printf "==> %s <==\n\n" "$file"
    fi

    pipeline=
    pipeline_start=$file

    if [ "${squeeze_blank_lines:-0}" -eq 1 ]; then
        pipeline=squeeze_blank_lines
    fi

    exit_code=0

    # Check that the file is readable
    if [ "$file" != - ]; then
        if [ ! -r "$file" ]; then
            echo "$0: Cannot read file: $file" >&2
            exit_code=1
        fi

        [ ! -s "$file" ] && continue
    fi

    if [ -z "$output_file" -o "$output_file" = "-" ]; then
        dest_file=$out_fifo

        (
            if [ $tab_stop -ne 8 ]; then
                stty tab0         2>/dev/null >/dev/tty
                tabs -${tab_stop} 2>/dev/null >/dev/tty
            fi
            while :; do
                [ ! -z "$scroll_time" ] && sleep ${scroll_time}
                cat "$out_fifo" & cat_pid=$!
                echo ${cat_pid} > "${tmp_dir}/cat_pid"
                wait ${cat_pid}
            done
        ) &
        tail_pid=$!
    else
        dest_file=$output_file
        printf '' > "$dest_file"
    fi

    start_highlight_job
    start_pipeline
    while [ ! -f "$tmp_dir/vim_done" ]; do
        do_sleep 50
    done

    if [ -n "$tail_pid" ]; then
        # if it's not a fifo where this doesn't work, tail needs some time to catch up
        [ ! -p "$out_fifo" ] && do_sleep 1100

        kill $tail_pid >/dev/null 2>&1
    fi

    i=$((i + 1))
done

quit $exit_code

# vim: sw=4 et ft=sh
: endif
: endwhile
: endwhile
: endif
: endif
: endif
: endif
: endif
: endif
: endif
: endfor
: endif
: endif
: endif
: endif
: endif
: endif
: endfor
: endif
: endif
: endwhile
: endif
: endif
: endfor
: endif
: endif
: endfor
: endif
: endif
: endif
: endif
: endif
: endif
: endif
: endif
: endif
: endif
: endif
" AnsiHighlight: Allows for marking up a file, using ANSI color escapes when
" the syntax changes colors, for easy, faithful reproduction.
" Author: Matthew Wozniski (mjw@drexel.edu)
" Date: Fri, 01 Aug 2008 05:22:55 -0400
" Version: 1.0 FIXME
" History: FIXME see :help marklines-history
" License: BSD. Completely open source, but I would like to be
" credited if you use some of this code elsewhere.

" Copyright (c) 2015, Matthew J. Wozniski {{{1
"
" Redistribution and use in source and binary forms, with or without
" modification, are permitted provided that the following conditions are met:
" * Redistributions of source code must retain the above copyright
" notice, this list of conditions and the following disclaimer.
" * Redistributions in binary form must reproduce the above copyright
" notice, this list of conditions and the following disclaimer in the
" documentation and/or other materials provided with the distribution.
"
" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER ``AS IS'' AND ANY
" EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
" DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
" DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
" (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
" ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
" SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

" Converts info for a highlight group to a string of ANSI color escapes {{{1

scriptencoding utf-8

let s:save_cpo = &cpo
set cpo&vim

function! s:GroupToAnsi(groupnum)
    if ! exists("s:ansicache")
        let s:ansicache = {}
    endif

    let groupnum = a:groupnum

    if groupnum == 0
        let groupnum = hlID('Normal')
    endif

    if has_key(s:ansicache, groupnum)
        return s:ansicache[groupnum]
    endif

    let fg = synIDattr(groupnum, 'fg', s:type)
    let bg = synIDattr(groupnum, 'bg', s:type)
    let rv = synIDattr(groupnum, 'reverse', s:type)
    let bd = synIDattr(groupnum, 'bold', s:type)

    " FIXME other attributes?

    if rv == "" || rv == -1
        let rv = 0
    endif

    if bd == "" || bd == -1
        let bd = 0
    endif

    if rv
        let temp = bg
        let bg = fg
        let fg = temp
    endif

    if fg == "" || fg == -1
        unlet fg
    endif

    if !exists('fg') && groupnum != hlID('Normal')
        let fg = synIDattr(hlID('Normal'), 'fg', s:type)
        if fg == "" || fg == -1
            unlet fg
        endif
    endif

    if bg == "" || bg == -1
        unlet bg
    endif

    if !exists('bg')
        let bg = synIDattr(hlID('Normal'), 'bg', s:type)
        if bg == "" || bg == -1
            unlet bg
        endif
    endif

    let retv = "\<Esc>[22;24;25;27;28"

    if bd
        let retv .= ";1"
    endif

    if exists('fg') && fg < 8
        let retv .= ";3" . fg
    elseif exists('fg')  && fg < 16    "use aixterm codes
        let retv .= ";9" . (fg - 8)
    elseif exists('fg')                "use xterm256 codes
        let retv .= ";38;5;" . fg
    else
        let retv .= ";39"
    endif

    if exists('bg') && bg < 8
        let retv .= ";4" . bg
    elseif exists('bg') && bg < 16     "use aixterm codes
        let retv .= ";10" . (bg - 8)
    elseif exists('bg')                "use xterm256 codes
        let retv .= ";48;5;" . bg
    else
        let retv .= ";49"
    endif

    let retv .= "m"

    let s:ansicache[groupnum] = retv

    return retv
endfunction

function! s:ReadChunks()
    let chunk_files = filter(split(glob(s:pipeline_dir . '/*', 1), '\n'), 'getfsize(v:val) > 0')

    if !len(chunk_files)
        return 0
    endif

    call sort(chunk_files)

    for chunk_file in chunk_files
        let block = readfile(chunk_file, 'b')

        let chunk_newline = 0

        if block[-1] == ''
            let chunk_newline = 1
            call remove(block, -1)
        endif

        let lines = []

        if line('$') == 1 && getline(1) == ''
            let append_to = 0
        else
            if !s:chunk_newline
                let lines = [ getline(line('$')) . remove(block, 0) ]
                $d
            endif

            let append_to = line('$')
        endif

        let lines += block

        call append(append_to, lines)

        if append_to == 0
            $d
        endif

        if s:chunk_num > 20
            normal '0ggd/\_.\{4096}/e'
        endif

        let s:chunk_newline = chunk_newline

        let s:chunk_num += 1
    endfor

    call map(chunk_files, 'delete(v:val)')

    return 1
endfunction

function! s:AnsiHighlight(output_file, line_numbers, pipeline_dir)
    let s:pipeline_dir = a:pipeline_dir

    setlocal modifiable noreadonly buflisted buftype=nowrite

    if a:pipeline_dir != ''
        let s:chunk_num     = 1
        let s:chunk_newline = 0

        while !s:ReadChunks()
            sleep 100 m
        endwhile

        let ln_field_len = 7
    else
        let ln_field_len = len(line('$'))
    endif

    if &l:ft == ''
        filetype detect
    endif
    syntax enable
    syntax sync minlines=500 maxlines=500

    let done = 0
    let lnum = 1

    while !done
        let last = hlID('Normal')
        let output = s:GroupToAnsi(last) . "\<Esc>[K" " Clear to right

        " Hopefully fix highlighting sync issues
        exe "norm! " . lnum . "G$"

        let line = getline(lnum)
        let cnum = 1

        while cnum <=# col('.')
            " skip ansi codes in the file
            if cnum <=# col('.') - 1 && line[cnum-1] ==# "\e" && line[cnum] ==# '['
                let cnum += 2
                while match(line[cnum-1], '[A-Za-z]') ==# -1
                    let cnum += 1
                endwhile

                let cnum += 1
                continue
            endif

            let concealed = synconcealed(lnum, cnum)

            if empty(concealed) " no conceal feature
                let concealed = [0]
            endif

            if concealed[0] !=# 1 && synIDtrans(synID(lnum, cnum, 1)) != last
                let last = synIDtrans(synID(lnum, cnum, 1))
                let output .= s:GroupToAnsi(last)
            endif

            if concealed[0] ==# 1 && &conceallevel !=# 0
                if &conceallevel ==# 1 || &conceallevel ==# 2
                    let output .= concealed[1]
                endif
            else
                let output .= line[cnum-1]
            endif
            "let line = substitute(line, '.', '', '')
                        "let line = matchstr(line, '^\@<!.*')
            let cnum += 1
        endwhile

        if a:line_numbers
            let output = printf("\<Esc>[0m\<Esc>[37;1m%" . ln_field_len . "d ", lnum) . output
        endif

        call writefile([output . "\<Esc>[0m\r"], a:output_file, 'a')

        let lnum += 1

        if a:pipeline_dir == ''
            if lnum > line('$')
                let done = 1
            endif
        else
            if lnum % 30 == 0
                call s:ReadChunks()
            endif

            if lnum > line('$')
                let stream_underrun = 1

                while stream_underrun
                    let stream_underrun = !s:ReadChunks()

                    if stream_underrun
                        if filereadable(a:pipeline_dir . '/PIPELINE_DONE')
                            let done = 1
                            break
                        endif

                        sleep 100 m
                    endif
                endwhile
            endif
        endif
    endwhile

    return 1
endfunction

function! Init(opts)
    " save for other functions
    let s:opts = a:opts

    " Turn off vi-compatible mode, unless it's already off {{{1
    if !has('nvim') && &cp
        set nocp
    endif

    let s:type = 'cterm'
    if &t_Co == 0
        let s:type = 'term'
    endif

    set foldlevel=9999
endfunction

function! s:SetHighlightOpts()
    " set sensible default highlight options for people without an rc
    if (s:opts.rc =~? '^ *$' || s:opts.rc =~? '^ *NO\(NE\|RC\) *$') && $MYVIMRC =~? '^ *$'
        set bg=dark
        highlight Normal ctermbg=NONE
    endif

    syntax enable
endfunction

function! Run(output_file, line_numbers, pipeline_dir, pipeline_start)
    call s:SetHighlightOpts()
    silent! execute 'file ' . fnameescape(a:pipeline_start)
    setlocal buftype=nowrite modifiable noreadonly viminfo=
    call s:AnsiHighlight(a:output_file, a:line_numbers, a:pipeline_dir)
    if !exists('$VIMCAT_DEBUG') || $VIMCAT_DEBUG == 0
        quitall!
    endif
endfunction

let &cpo = s:save_cpo

" See copyright in the vim script above (for the vim script) and in
" vimcat.md for the whole script.
"
" The list of contributors is at the bottom of the vimpager script in this
" project.
"
" vim: sw=4 et ft=vim:
